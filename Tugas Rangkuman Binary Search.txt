Nama : Paryanto
kelas : TIF 16B RM
NIM : 16 111 235

Rangkuman
Pencarian Bagi Dua (Binary Search)

1.Definisi Pencarian Bagi Dua (Binary Search)
  Pencarian Bagi Dua (Binary Search) adalah metode dari pencarian yang menggunakan konsep membagi dua jumlah elemen,larik atau array yang telah ditentukan.
  Syarat utama dalam Pencarian Bagi Dua (Binary Search) ialah sekumpulan data atau algoritma yang ingin dicari nanti sudah terurut, baik secara menaik atau menurun.

2.Tujuan Pencarian Bagi Dua (Binary Search)
 - memperkecil jumlah operasi perbandingan yang harus dilakukan antara data yang dicari dengan data yang ada di dalam tabel, khususnya untuk jumlah data 
   yang sangat besar ukurannya.
 - Prinsip dasarnya adalah melakukan proses pembagian ruang pencarian secara berulang-ulang sampai data ditemukan atau sampai ruang pencarian tidak dapat 
   dibagi lagi (berarti ada kemungkinan data tidak ditemukan).
 - Syarat utama untuk pencarian Bagi Dua adalah data di dalam tabel harus sudah terurut, misalkan terurut menaik atau terurut menurun 

3.Proses Yang Terjadi Pada Algoritma Pencarian Bagi Dua (Binary Search)
  Proses yang terjadi pada pencarian dengan metode ini adalah sebagai berikut :
	- Membaca Array data
	- Apabila Array belum terurut maka array diurutkan terlebih dahulu,supaya bisa di pahami
	- Menentukan data yang akan dicari
	- Menentukan elemen tengah dari array
	- Jika nilai elemen tengah sama dengan data yang dicari, maka berhenti pencarianya.
	- Jika elemen tengah tidak sama dengan data yang dicari maka :
		a)Jika nilai elemen tengah > data yang dicari maka pencarian dilakukan pada setengah array pertama.
		b)Jika nilai elemen tengah lebih kecil dari pada data yang dicari maka pencarian dilakukan pada setengah array berikutnya.

4.Kekurangan dan Kelebihan pada Binary Search:
 - Kekurangan implementasi agak sedikit lebih rumit karena tidak bisa digunakan pada data array yang masih acak. Jadi harus melakukan sorting terlebih dahulu dalam    implementasinya.
 - Kelebihannya yaitu tidak perlu membandingkan data yang dicari dengan seluruh data array yang ada, cukup melalui titik tengah kemudian kita bisa menentukan 
   ke mana selanjutnya mencari data yang ingin dicari.

5.Langkah-langkah dalam Mencari data Menggunakan Konsep Pencarian Bagi Dua (Binary Search)

 - Berilah simbol untuk mempermudah dalam memproses data , seperti sekumpulan data dikodekan menjadi n , larik dikodekan L , dan data yang akan dicari dikodekan       menjadi X.
 - Sepakati bahwa nilai index awal atau kita kodekan menjadi a=0 dan index akhir atau kita kodekan menjadi b=n-1.
 -  Tentukan apakah sekumpulan data terurut yang akan dicari bersifat menaik atau menurun dengan cara membandingkan elemen kanan dan kiri
 -  Jika data elemen paling kiri L[0] > data elemen paling kanan L[n-1], maka data terurut tersebut menurun.
 -  Jika data elemen paling kiri L[0] < data elemen paling kanan L[n-1], maka data terurut tersebut menaik.
 - Selanjutnya kita beri kode untuk index data tengah sebuah array tersebut dengan variabel c , sehingga :
	C = (a+b)div 2
 - Dari rumus diatas,kita langsung mendapatkan data tengah nya.Lalu periksa apakah L[c] = X , maka data yang dicari langsung didapat dari rumus C diatas.
 - Tetapi jika L[c] < X maka pencarian data dilakukan dari sisi kanan index c atau data tengah dengan menggunakan rumus C tersebut.Dan jika L[c] >X maka pencarian data    dilakukan dari sisi kiri index c atau data tengah dengan menggunakan rumus C dimana dengan nilai b sama dengan nilai c dan pencarian dilakukan sampai seterusnya       hingga ketemu nilai X atau tidak sama sekali. 

(Note : Konsep ini untuk data terurut menaik. Jika data terurut menurun maka hanya mengubah konsep L[c]<X dari sisi kiri dan L[c]>X dari sisi kanan).

contoh nya sebagai berikut di bawah ini :
	Diberikan sebuah data terurut sebanyak 10 elemen L[10] = {1,2,3,4,5,6,7,8,9,10}.Tentukanlah nilai X=3 di elemen tersebut ?
Penyelesaian :
 - Tentukan apakah data terurut tersebut menaik atau menurun dengan membaca  L[0] dan L[n-1]
		L[0] = 2
		L[7] = 9
    Karena L[0] < L[7] maka data terurut tersebut menaik.
 - Misalkan index paling kanan a=0 dan index paling kiri b=7 maka index tengahnya adalah :
		C = (a+b)div 2 = (0+7)div 2 = 3.
	Dari konsep index C didapat elemen tengah adalah 3 dengan L[3] = 5.
 - Karena data index tengah lebih besar dari nilai yang akan dicari (L[3] >X ) maka pencarian data berikutnya dilakukan pada sisi kiri index C dengan syarat nilai    index C sama dengan nilai b, sehingga :
		B = C = 3 , C = (a+b)div 2 = (0+3)div 2 = 1.
	Elemen tengah menjadi 1 dengan L[1] = 3
 - Karena nilai data di elemen tengah sama dengan niali yang dicari atau X maka pencarian berakhir.Data X ditemukan di index ke-1.

contoh program nya sebagai berikut :

#include <iostream>
using namespace std;
int main(){
 const int Ar[10] = {1,2,3,4,5,6,7,8,9,10}; // untuk proses ascending
 int tar;

 for (tar=0; tar<10; tar++){
	 cout << Ar[tar] << endl;
 }
cout<<"masukan data yang dicari : ";
 cin>>tar;
int awal=0, akhir=10, tengah;


 while (awal <= akhir)
  { tengah = (awal + akhir)/2;
  if (tar > Ar[tengah] )      // descending ubah tanda > menjadi <
      { awal = tengah + 1; }
  else if (tar < Ar[tengah])  // descending ubah tanda < menjadi >
  {akhir= tengah - 1;}
  else {awal = akhir +1;
  }
   }
   if (tar == Ar[tengah])
   {cout<<" Data ditemukan, Ke- "<<tengah+1<<endl;
   }
   else {
    cout<<"target tidak ditemukan "<<endl;
   }
return 0;
}
